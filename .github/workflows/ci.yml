name: Publish a Docker image and deploy

on:
  push:
    # branches: ['main']

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    strategy:
      fail-fast: false
      matrix:
        package: ['client', 'rvc']

    outputs:
      is-updated: ${{ steps.isUpdated.outputs.status }}
      image_tag: ${{ steps.meta.outputs.tags }}-${{ github.run_number }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Check if code is changed
        uses: technote-space/get-diff-action@v6
        id: git-diff
        with:
          PATTERNS: |
            ${{ matrix.package }}/**/*

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        if: steps.git-diff.outputs.diff

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        if: steps.git-diff.outputs.diff
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        if: steps.git-diff.outputs.diff
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.package }}
          flavor: latest=true
          tags: type=sha

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v4
        if: steps.git-diff.outputs.diff
        with:
          context: '{{defaultContext}}:${{ matrix.package }}'
          push: true
          tags: ${{ steps.meta.outputs.tags }}-${{ github.run_number }}
          labels: ${{ steps.meta.outputs.labels }}
          # cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.package }}:buildcache
          # cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.package }}:buildcache,mode=max

      - name: Set updated status
        id: isUpdated
        if: steps.git-diff.outputs.diff
        run: echo "status=true" >> "$GITHUB_OUTPUT"

  update-config-repo:
    name: Update Config Repo
    runs-on: ubuntu-latest
    needs: build-and-push-image
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          repository: 'gokoro/kayoko-configs'
          token: ${{ secrets.PAT }}

      - name: Change value in menifest file
        run: |
          FILE="kustomize/overlays/prod/deployment.yaml"
          REGEX="ghcr\.io\/gokoro\/kayoko-client:(.+)"

          sed -i.bak -E "s|$REGEX|ghcr.io/gokoro/kayoko-client:${{ needs.build-and-push-image.outputs.image_tag }}|g" $FILE

      - uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: 'Update image tag to ${{ needs.build-and-push-image.outputs.image_tag }}'
          file_pattern: 'kustomize/overlays/prod/deployment.yaml'

  ecs-push:
    name: Update ECS Service
    runs-on: ubuntu-latest
    needs: build-and-push-image
    if: needs.build-and-push-image.outputs.is-updated == 'true'

    env:
      AWS_ROLE: ${{ secrets.AWS_ROLE_ARN }}
      CLUSTER: ${{ vars.CLUSTER }}
      SERVICE: ${{ vars.SERVICE }}

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ env.AWS_ROLE }}
          aws-region: ap-northeast-2

      - name: Update ECS
        run: aws ecs update-service --cluster ${{ env.CLUSTER }} --service ${{ env.SERVICE }} --force-new-deployment
